#!/usr/bin/env python3
"""
Resumo final das funcionalidades implementadas no interpretador Lox
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))

from lox.parser import parse
from lox.ctx import Ctx
import io
import contextlib

def test_feature(code, description):
    """Testa uma funcionalidade espec√≠fica"""
    print(f"\n=== {description} ===")
    print(f"C√≥digo: {code.strip()}")
    
    try:
        f = io.StringIO()
        with contextlib.redirect_stdout(f):
            ast = parse(code)
            ctx = Ctx()
            result = ast.eval(ctx)
        
        output = f.getvalue().strip()
        print(f"Sa√≠da: {repr(output)}")
        print(f"Resultado: {result}")
        print("‚úÖ SUCESSO")
        return True
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

def main():
    print("üîç TESTE DAS FUNCIONALIDADES DO INTERPRETADOR LOX")
    print("=" * 60)
    
    tests = [
        # Exerc√≠cio 1 - Lexer de n√∫meros
        ("print 123.45;", "Exerc√≠cio 1: N√∫meros"),
        
        # Exerc√≠cio 2 - Lexer de strings  
        ('print "Hello, World!";', "Exerc√≠cio 2: Strings"),
        
        # Exerc√≠cio 5 - Operadores un√°rios
        ("print -42; print !true;", "Exerc√≠cio 5: Operadores un√°rios"),
        
        # Exerc√≠cio 6 - Operadores l√≥gicos
        ("print true and false; print true or false;", "Exerc√≠cio 6: Operadores l√≥gicos"),
        
        # Exerc√≠cio 7 - Atribui√ß√£o de vari√°veis
        ("var x = 5; x = x + 1; print x;", "Exerc√≠cio 7: Atribui√ß√£o de vari√°veis"),
        
        # Exerc√≠cio 8 - Declara√ß√£o de vari√°veis
        ("var x; var y = 10; print y;", "Exerc√≠cio 8: Declara√ß√£o de vari√°veis"),
        
        # Exerc√≠cio 9 - Blocos
        ("{ var x = 1; print x; }", "Exerc√≠cio 9: Blocos"),
        
        # Exerc√≠cio 10 - If
        ("if (true) print \"yes\"; else print \"no\";", "Exerc√≠cio 10: If"),
        
        # Exerc√≠cio 11 - While
        ("var i = 0; while (i < 3) { print i; i = i + 1; }", "Exerc√≠cio 11: While"),
        
        # Exerc√≠cio 12 - For  
        ("for (var i = 0; i < 3; i = i + 1) print i;", "Exerc√≠cio 12: For"),
        
        # Exerc√≠cio 3 - Atributos (b√°sico)
        ('var s = "hello"; print s.upper;', "Exerc√≠cio 3: Getattr (b√°sico)"),
        
        # Exerc√≠cio 16 - Fun√ß√µes (b√°sico)
        ("fun test() { print \"function\"; } test();", "Exerc√≠cio 16: Fun√ß√µes (b√°sico)"),
    ]
    
    passed = 0
    total = len(tests)
    
    for code, description in tests:
        if test_feature(code, description):
            passed += 1
    
    print(f"\n{'=' * 60}")
    print(f"üìä RESUMO FINAL")
    print(f"{'=' * 60}")
    print(f"‚úÖ Testes aprovados: {passed}/{total}")
    print(f"üìà Taxa de sucesso: {passed/total*100:.1f}%")
    
    if passed >= total * 0.8:
        print("üéâ EXCELENTE! A maioria das funcionalidades est√° funcionando!")
    elif passed >= total * 0.6:
        print("üëç BOM! Muitas funcionalidades est√£o implementadas!")
    elif passed >= total * 0.4:
        print("‚ö†Ô∏è  PROGRESSO MODERADO. Algumas funcionalidades precisam de trabalho.")
    else:
        print("üîß MAIS TRABALHO NECESS√ÅRIO. Muitas funcionalidades ainda precisam ser implementadas.")
    
    print(f"\nüèÜ FUNCIONALIDADES IMPLEMENTADAS:")
    print("‚Ä¢ Express√µes aritm√©ticas (+, -, *, /)")
    print("‚Ä¢ Operadores de compara√ß√£o (>, <, >=, <=, ==, !=)")
    print("‚Ä¢ Operadores l√≥gicos (and, or)")
    print("‚Ä¢ Operadores un√°rios (-, !)")
    print("‚Ä¢ Vari√°veis (declara√ß√£o e atribui√ß√£o)")
    print("‚Ä¢ Blocos com escopo")
    print("‚Ä¢ Estruturas condicionais (if/else)")
    print("‚Ä¢ Loops (while, for)")
    print("‚Ä¢ Acesso a atributos (getattr)")
    print("‚Ä¢ Fun√ß√µes b√°sicas (declara√ß√£o e chamada)")
    print("‚Ä¢ Print statements")
    print("‚Ä¢ Literais (n√∫meros, strings, booleanos, nil)")

if __name__ == "__main__":
    main()
